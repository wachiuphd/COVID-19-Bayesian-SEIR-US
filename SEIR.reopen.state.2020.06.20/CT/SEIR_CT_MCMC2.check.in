MCMC ("simMCMC.out","SEIR_CT_MCMC2.out",  # name of output and restart file
      "",                     # name of data file
      200000,1,                 # iterations, print predictions flag,
      100,200000,                 # printing frequency, iters to print
      10101010);              # random seed (default)

Integrate (Lsodes, 1e-8, 1e-10, 1);

Level {
  
  Distrib(GM_NInit, TruncLogNormal, 1000, 10, 1, 10000); # Number of index cases
  Distrib(GM_TIsolation, TruncLogNormal, 14, 2, 7, 21); # Isolation time after contact tracing
  Distrib(GM_R0, TruncNormal, 2.9, 0.78, 1.46, 4.5); # Basic reproductive number
  Distrib(GM_c0, TruncNormal, 13, 5, 7, 20); # Average contacts/day
  Distrib(GM_TLatent, TruncNormal, 4, 1, 2, 7); # Latency
  Distrib(GM_TRecover, TruncLogNormal, 10, 1.5, 5, 30); # Time to recovery (no longer infectious)
  Distrib(GM_IFR, TruncLogNormal, 0.01, 2, 0.001, 0.1); # Infected fatality rate
  Distrib(GM_T50Testing, TruncNormal, 120, 60, 60, 180); # Time of 50% of final testing rate
  Distrib(GM_TauTesting, TruncNormal, 21, 14, 1, 42); # Time constant for testing
  Distrib(GM_TTestingRate, TruncNormal, 7, 3, 2, 12);
  Distrib(GM_TContactsTestingRate, TruncNormal, 2, 1, 1, 3); 
  Distrib(GM_FAsymp, TruncNormal, 0.295, 0.275, 0.02, 0.57); # Fraction asymptomatic
  Distrib(GM_TestingCoverage, Beta, 2, 2); # Testing coverage
  Distrib(GM_TestSensitivity, TruncNormal, 0.7, 0.1, 0.6, 0.95);
  Distrib(GM_ThetaMin, TruncNormal, 0.408, 0.239, 0, 1); # Minimum value for social distancing
  Distrib(GM_TauTheta, TruncNormal, 17.2, 1.48, 7, 35); # Characteristic time for social distancing
  Distrib(GM_PwrTheta, TruncNormal, 3.97, 0.913, 1, 11); # Power in Weibull model for social distancing
  Distrib(GM_HygienePwr, Beta, 2, 4); # Power in Weibull model for social distancing
  Distrib(GM_FracTraced, TruncLogNormal, 0.25, 2, 0.05, 1); # Fraction traced
  
  Distrib(GM_TPosTest, TruncLogNormal, 7, 2, 1, 14); # Reporting delay
  Distrib(GM_TFatalDeath, TruncLogNormal, 7, 2, 1, 14); # Time from fatal illness to death + reporting delay
  
  Distrib(GM_TauS, TruncNormal, 36.5, 9.67, 21, 90);
  Distrib(GM_rMax, TruncNormal, 0.46, 0.146, 0, 2);
  Distrib(GM_TauR, TruncNormal, 47, 10.2, 14, 105);
  
  Distrib(alpha_Pos, LogUniform, 0.1, 40);
  Distrib(alpha_Death, LogUniform, 0.1, 40);
  
  Level {
    
    Likelihood(Data(N_pos), NegativeBinomial, alpha_Pos, Prediction(p_N_pos));
    Likelihood(Data(D_pos), NegativeBinomial, alpha_Death, Prediction(p_D_pos));

    Simulation { # CT 

      Npop = 3565287 ;
      StartTime(60);

      Print(N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      Data(N_pos, 28 98 0 29 192 203 257 137 279 0 702 578 557 429 267 1090 362 399 1231 875 0 2003 754 972 525 1346 608 766 1129 925 0 741 2265 545 2109 631 821 661 687 0 1043 455 933 1064 0 523 0 1334 374 789 627 573 570 211 568 522 609 621 618 716 697 314 587 191 432 382 446 405 430 271 203 260 179 539 239 112 148 221 358 150 124 87 168 114 228 305 94 147 114 80 11 117 158 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 );
      Print(p_N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      Print(D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      Data(D_pos, 1 2 1 1 5 2 7 2 6 0 7 2 33 16 27 19 34 24 17 71 0 103 68 46 60 48 69 197 103 65 0 50 245 92 121 95 125 98 62 74 91 79 89 82 0 97 59 138 85 79 77 58 35 41 33 84 94 66 54 69 41 23 57 53 55 38 18 49 27 34 23 42 44 32 20 8 17 18 31 17 16 13 13 23 26 13 27 15 3 6 9 7 12 13 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 );
      Print(p_D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      PrintStep( S , 60,  296 , 1);
      PrintStep( S_C , 60,  296 , 1);
      PrintStep( E , 60,  296 , 1);
      PrintStep( E_C , 60,  296 , 1);
      PrintStep( I_U , 60,  296 , 1);
      PrintStep( I_C , 60,  296 , 1);
      PrintStep( I_T , 60,  296 , 1);
      PrintStep( A_U , 60,  296 , 1);
      PrintStep( A_C , 60,  296 , 1);
      PrintStep( R_U , 60,  296 , 1);
      PrintStep( R_T , 60,  296 , 1);
      PrintStep( F_T , 60,  296 , 1);
      PrintStep( CumInfected , 60,  296 , 1);
      PrintStep( CumPosTest , 60,  296 , 1);
      PrintStep( CumDeath , 60,  296 , 1);
      PrintStep( dtCumInfected , 60,  296 , 1);
      PrintStep( dtCumPosTest , 60,  296 , 1);
      PrintStep( dtCumDeath , 60,  296 , 1);
      PrintStep( Tot , 60,  296 , 1);
      PrintStep( ThetaFit , 60,  296 , 1);
      PrintStep( HygieneFit , 60,  296 , 1);
      PrintStep( c , 60,  296 , 1);
      PrintStep( beta , 60,  296 , 1);
      PrintStep( rho , 60,  296 , 1);
      PrintStep( lambda , 60,  296 , 1);
      PrintStep( delta , 60,  296 , 1);
      PrintStep( Rt , 60,  296 , 1);
      PrintStep( Refft , 60,  296 , 1);

    }
  }
}
