MCMC ("simMCMC.out","SEIR_NV_MCMC1.out",  # name of output and restart file
      "",                     # name of data file
      200000,1,                 # iterations, print predictions flag,
      100,200000,                 # printing frequency, iters to print
      10101010);              # random seed (default)

Integrate (Lsodes, 1e-8, 1e-10, 1);

Level {
  
  Distrib(GM_NInit, TruncLogNormal, 1000, 10, 1, 10000); # Number of index cases
  Distrib(GM_TIsolation, TruncLogNormal, 14, 2, 7, 21); # Isolation time after contact tracing
  Distrib(GM_R0, TruncNormal, 2.9, 0.78, 1.46, 4.5); # Basic reproductive number
  Distrib(GM_c0, TruncNormal, 13, 5, 7, 20); # Average contacts/day
  Distrib(GM_TLatent, TruncNormal, 4, 1, 2, 7); # Latency
  Distrib(GM_TRecover, TruncLogNormal, 10, 1.5, 5, 30); # Time to recovery (no longer infectious)
  Distrib(GM_IFR, TruncLogNormal, 0.01, 2, 0.001, 0.1); # Infected fatality rate
  Distrib(GM_T50Testing, TruncNormal, 120, 60, 60, 180); # Time of 50% of final testing rate
  Distrib(GM_TauTesting, TruncNormal, 21, 14, 1, 42); # Time constant for testing
  Distrib(GM_TTestingRate, TruncNormal, 7, 3, 2, 12);
  Distrib(GM_TContactsTestingRate, TruncNormal, 2, 1, 1, 3); 
  Distrib(GM_FAsymp, TruncNormal, 0.295, 0.275, 0.02, 0.57); # Fraction asymptomatic
  Distrib(GM_TestingCoverage, Beta, 2, 2); # Testing coverage
  Distrib(GM_TestSensitivity, TruncNormal, 0.7, 0.1, 0.6, 0.95);
  Distrib(GM_ThetaMin, TruncNormal, 0.395, 0.252, 0, 1); # Minimum value for social distancing
  Distrib(GM_TauTheta, TruncNormal, 17.7, 1.02, 7, 35); # Characteristic time for social distancing
  Distrib(GM_PwrTheta, TruncNormal, 7.14, 1.52, 1, 11); # Power in Weibull model for social distancing
  Distrib(GM_HygienePwr, Beta, 2, 4); # Power in Weibull model for social distancing
  Distrib(GM_FracTraced, TruncLogNormal, 0.25, 2, 0.05, 1); # Fraction traced
  
  Distrib(GM_TPosTest, TruncLogNormal, 7, 2, 1, 14); # Reporting delay
  Distrib(GM_TFatalDeath, TruncLogNormal, 7, 2, 1, 14); # Time from fatal illness to death + reporting delay
  
  Distrib(GM_TauS, TruncNormal, 36.1, 9.77, 21, 90);
  Distrib(GM_rMax, TruncNormal, 0.448, 0.132, 0, 2);
  Distrib(GM_TauR, TruncNormal, 48.1, 10.2, 14, 105);
  
  Distrib(alpha_Pos, LogUniform, 0.1, 40);
  Distrib(alpha_Death, LogUniform, 0.1, 40);
  
  Level {
    
    Likelihood(Data(N_pos), NegativeBinomial, alpha_Pos, Prediction(p_N_pos));
    Likelihood(Data(D_pos), NegativeBinomial, alpha_Death, Prediction(p_D_pos));

    Simulation { # NV 

      Npop = 3080156 ;
      StartTime(60);

      Print(N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      Data(N_pos, 40 14 15 66 55 33 43 99 115 86 117 270 105 166 179 56 228 94 117 134 231 138 128 116 136 135 117 123 110 203 102 102 102 107 144 127 190 141 63 88 115 93 100 229 84 115 65 103 69 103 118 144 70 54 159 83 105 115 48 195 49 140 120 89 146 295 74 109 118 116 95 142 145 98 95 142 105 155 176 194 189 137 244 134 235 279 268 227 106 379 184 234 410 445 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 );
      Print(p_N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      Print(D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      Data(D_pos, 1 0 2 2 1 5 0 4 4 4 3 4 5 8 6 8 11 6 3 12 10 9 10 5 3 5 8 9 8 4 6 4 8 13 8 9 6 13 6 10 6 6 12 8 4 6 5 5 14 9 8 6 5 5 6 5 3 10 1 6 8 7 3 4 3 4 4 2 2 4 9 10 4 5 1 7 3 5 0 3 2 4 3 2 1 0 3 1 4 2 1 3 2 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 );
      Print(p_D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      PrintStep( S , 60,  296 , 1);
      PrintStep( S_C , 60,  296 , 1);
      PrintStep( E , 60,  296 , 1);
      PrintStep( E_C , 60,  296 , 1);
      PrintStep( I_U , 60,  296 , 1);
      PrintStep( I_C , 60,  296 , 1);
      PrintStep( I_T , 60,  296 , 1);
      PrintStep( R_U , 60,  296 , 1);
      PrintStep( R_T , 60,  296 , 1);
      PrintStep( F_T , 60,  296 , 1);
      PrintStep( CumInfected , 60,  296 , 1);
      PrintStep( CumPosTest , 60,  296 , 1);
      PrintStep( CumDeath , 60,  296 , 1);
      PrintStep( dtCumInfected , 60,  296 , 1);
      PrintStep( dtCumPosTest , 60,  296 , 1);
      PrintStep( dtCumDeath , 60,  296 , 1);
      PrintStep( Tot , 60,  296 , 1);
      PrintStep( ThetaFit , 60,  296 , 1);
      PrintStep( HygieneFit , 60,  296 , 1);
      PrintStep( c , 60,  296 , 1);
      PrintStep( beta , 60,  296 , 1);
      PrintStep( rho , 60,  296 , 1);
      PrintStep( lambda , 60,  296 , 1);
      PrintStep( delta , 60,  296 , 1);
      PrintStep( Rt , 60,  296 , 1);
      PrintStep( Refft , 60,  296 , 1);

    }
  }
}
