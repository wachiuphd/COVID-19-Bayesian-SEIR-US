MCMC ("simMCMC.out","",  # name of output and restart file
      "",                     # name of data file
      200000,0,                 # iterations, print predictions flag,
      100,200000,                 # printing frequency, iters to print
      34330995.834277);              # random seed (default)

Integrate (Lsodes, 1e-8, 1e-10, 1);

Level {
  
  Distrib(GM_NInit, TruncLogNormal, 1000, 10, 1, 10000); # Number of index cases
  Distrib(GM_TIsolation, TruncLogNormal, 14, 2, 7, 21); # Isolation time after contact tracing
  Distrib(GM_R0, TruncNormal, 2.9, 0.78, 1.46, 4.5); # Basic reproductive number
  Distrib(GM_c0, TruncNormal, 13, 5, 7, 20); # Average contacts/day
  Distrib(GM_TLatent, TruncNormal, 4, 1, 2, 7); # Latency
  Distrib(GM_TRecover, TruncLogNormal, 10, 1.5, 5, 30); # Time to recovery (no longer infectious)
  Distrib(GM_IFR, TruncLogNormal, 0.01, 2, 0.001, 0.1); # Infected fatality rate
  Distrib(GM_TStartTesting, TruncNormal, 90, 30, 60, 150); # Time of start of testing
  Distrib(GM_TauTesting, TruncNormal, 7, 3, 1, 14); # Time constant for testing
  Distrib(GM_TTestingRate, TruncNormal, 7, 3, 2, 12);
  Distrib(GM_TContactsTestingRate, TruncNormal, 2, 1, 1, 3); 
  Distrib(GM_TestingCoverage, TruncNormal, 0.5, 0.2, 0.2, 0.8);
  Distrib(GM_TestSensitivity, TruncNormal, 0.7, 0.1, 0.6, 0.95);
  Distrib(GM_ThetaMin, TruncNormal, 0.44, 0.249, 0, 0.778); # Minimum value for social distancing
  Distrib(GM_TauTheta, TruncNormal, 18.5, 1.96, 15, 20); # Characteristic time for social distancing
  Distrib(GM_PwrTheta, TruncNormal, 3.98, 1.26, 2.33, 5.91); # Power in Weibull model for social distancing
  Distrib(GM_HygienePwr, Beta, 2, 2); # Power in Weibull model for social distancing
  Distrib(GM_FracTraced, TruncLogNormal, 0.25, 2, 0.05, 1); # Fraction traced
  
  Distrib(GM_TPosTest, TruncLogNormal, 7, 2, 1, 14); # Reporting delay
  Distrib(GM_TFatalDeath, TruncLogNormal, 7, 2, 1, 14); # Time from fatal illness to death + reporting delay
  
  Distrib(GM_TauS, TruncNormal, 27.4, 8.82, 18.3, 40.9);
  Distrib(GM_rMax, TruncNormal, 0.429, 0.141, 0.211, 0.634);
  Distrib(GM_TauR, TruncNormal, 38.7, 11.5, 21.6, 53.7);
  
  Distrib(alpha_Pos, LogUniform, 4, 40);
  Distrib(alpha_Death, LogUniform, 8, 40);
  
  Level {
    
    Likelihood(Data(N_pos), NegativeBinomial, alpha_Pos, Prediction(p_N_pos));
    Likelihood(Data(D_pos), NegativeBinomial, alpha_Death, Prediction(p_D_pos));

    Simulation { # TX 

      Npop = 28995881 ;
      StartTime(60);

      Print(N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Data(N_pos, 60 51 110 30 18 58 564 422 335 321 500 325 389 731 672 661 780 702 464 986 1091 877 1441 890 923 422 718 868 963 916 889 663 535 738 873 875 862 967 858 666 874 883 1033 1142 1293 1026 784 1037 1053 968 1219 1251 1009 1000 1179 1355 1448 1347 1801 785 909 1219 1411 945 1181 1060 839 623 589 1361 1855 1230 1332 1949 593 1688 1703 1649 1693 1940 1425 638 1637 2504 1826 2097 2331 1843 1254 4098 3129 3516 3454 4430 3866 3280 5489 5551 5996 5707 5747 5357 4283 6975 8076 7915 7555 8258 3449 5318 10028 9979 9782 9765 10351 8196 5655 10745 7307 10291 14916 10158 7300 7404 9305 9879 );
      Print(p_N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Print(D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Data(D_pos, 1 2 0 0 3 1 3 6 5 4 7 0 7 17 12 20 15 22 13 14 23 22 27 28 17 16 31 46 29 35 25 24 18 22 26 18 32 30 25 15 27 42 50 34 31 20 17 22 42 25 31 45 39 12 33 25 58 56 33 31 11 22 50 21 40 26 0 21 9 26 39 25 0 46 6 20 36 33 21 31 11 0 23 32 35 19 18 19 7 46 33 43 35 25 17 10 28 29 47 28 42 27 10 21 57 44 50 33 29 18 60 98 105 95 99 80 43 87 110 129 174 130 93 62 131 197 );
      Print(p_D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      PrintStep( S , 60,  294 , 1);
      PrintStep( S_C , 60,  294 , 1);
      PrintStep( E , 60,  294 , 1);
      PrintStep( E_C , 60,  294 , 1);
      PrintStep( I_U , 60,  294 , 1);
      PrintStep( I_C , 60,  294 , 1);
      PrintStep( I_T , 60,  294 , 1);
      PrintStep( R_U , 60,  294 , 1);
      PrintStep( R_T , 60,  294 , 1);
      PrintStep( F_T , 60,  294 , 1);
      PrintStep( CumInfected , 60,  294 , 1);
      PrintStep( CumPosTest , 60,  294 , 1);
      PrintStep( CumDeath , 60,  294 , 1);
      PrintStep( dtCumInfected , 60,  294 , 1);
      PrintStep( dtCumPosTest , 60,  294 , 1);
      PrintStep( dtCumDeath , 60,  294 , 1);
      PrintStep( Tot , 60,  294 , 1);
      PrintStep( ThetaFit , 60,  294 , 1);
      PrintStep( HygieneFit , 60,  294 , 1);
      PrintStep( c , 60,  294 , 1);
      PrintStep( beta , 60,  294 , 1);
      PrintStep( rho , 60,  294 , 1);
      PrintStep( lambda , 60,  294 , 1);
      PrintStep( delta , 60,  294 , 1);
      PrintStep( Rt , 60,  294 , 1);
      PrintStep( Refft , 60,  294 , 1);

    }
  }
}
