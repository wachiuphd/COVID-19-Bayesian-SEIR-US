MCMC ("simMCMC.out","SEIR_AL_MCMC3.out",  # name of output and restart file
      "",                     # name of data file
      200000,1,                 # iterations, print predictions flag,
      100,200000,                 # printing frequency, iters to print
      10101010);              # random seed (default)

Integrate (Lsodes, 1e-8, 1e-10, 1);

Level {
  
  Distrib(GM_NInit, TruncLogNormal, 1000, 10, 1, 10000); # Number of index cases
  Distrib(GM_TIsolation, TruncLogNormal, 14, 2, 7, 21); # Isolation time after contact tracing
  Distrib(GM_R0, TruncNormal, 2.9, 0.78, 1.46, 4.5); # Basic reproductive number
  Distrib(GM_c0, TruncNormal, 13, 5, 7, 20); # Average contacts/day
  Distrib(GM_TLatent, TruncNormal, 4, 1, 2, 7); # Latency
  Distrib(GM_TRecover, TruncLogNormal, 10, 1.5, 5, 30); # Time to recovery (no longer infectious)
  Distrib(GM_IFR, TruncLogNormal, 0.01, 2, 0.001, 0.1); # Infected fatality rate
  Distrib(GM_T50Testing, TruncNormal, 120, 60, 60, 180); # Time of 50% of final testing rate
  Distrib(GM_TauTesting, TruncNormal, 21, 14, 1, 42); # Time constant for testing
  Distrib(GM_TTestingRate, TruncNormal, 7, 3, 2, 12);
  Distrib(GM_TContactsTestingRate, TruncNormal, 2, 1, 1, 3); 
  Distrib(GM_FAsymp, TruncNormal, 0.295, 0.275, 0.02, 0.57); # Fraction asymptomatic
  Distrib(GM_TestingCoverage, Beta, 2, 2); # Testing coverage
  Distrib(GM_TestSensitivity, TruncNormal, 0.7, 0.1, 0.6, 0.95);
  Distrib(GM_ThetaMin, TruncNormal, 0.516, 0.267, 0, 1); # Minimum value for social distancing
  Distrib(GM_TauTheta, TruncNormal, 19.2, 2.21, 7, 35); # Characteristic time for social distancing
  Distrib(GM_PwrTheta, TruncNormal, 5.57, 1.37, 1, 11); # Power in Weibull model for social distancing
  Distrib(GM_HygienePwr, Beta, 2, 2); # Power in Weibull model for social distancing
  Distrib(GM_FracTraced, TruncLogNormal, 0.25, 2, 0.05, 1); # Fraction traced
  
  Distrib(GM_TPosTest, TruncLogNormal, 7, 2, 1, 14); # Reporting delay
  Distrib(GM_TFatalDeath, TruncLogNormal, 7, 2, 1, 14); # Time from fatal illness to death + reporting delay
  
  Distrib(GM_TauS, TruncNormal, 32.8, 11, 0, 90);
  Distrib(GM_rMax, TruncNormal, 0.66, 0.238, 0, 2);
  Distrib(GM_TauR, TruncNormal, 31.5, 16, 0, 105);
  
  Distrib(alpha_Pos, LogUniform, 0.1, 40);
  Distrib(alpha_Death, LogUniform, 0.1, 40);
  
  Level {
    
    Likelihood(Data(N_pos), NegativeBinomial, alpha_Pos, Prediction(p_N_pos));
    Likelihood(Data(D_pos), NegativeBinomial, alpha_Death, Prediction(p_D_pos));

    Simulation { # AL 

      Npop = 4903185 ;
      StartTime(60);

      Print(N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 );
      Data(N_pos, 22 13 43 14 29 48 68 223 81 109 110 53 122 96 156 199 148 216 172 151 250 400 199 223 334 209 142 237 232 185 125 182 188 206 234 313 54 305 133 229 188 155 177 139 276 291 300 260 296 317 323 346 210 232 301 307 351 248 307 248 315 290 368 375 444 375 389 403 666 447 467 513 536 544 460 279 209 221 315 656 457 425 497 567 856 865 891 1014 657 640 400 894 796 547 472 433 643 967 1142 977 900 358 1734 870 917 1149 1754 997 1091 925 907 1177 2212 1334 1439 1640 1958 1710 1812 2021 2003 2143 1777 1880 1467 1455 -1 );
      Print(p_N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 );
      Print(D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 );
      Data(D_pos, 0 0 0 0 0 0 0 1 2 0 1 2 7 13 6 3 8 2 5 6 10 8 6 11 2 6 11 11 12 11 2 8 13 10 17 3 0 15 4 6 20 3 24 10 9 2 6 17 27 9 26 13 5 8 28 20 18 9 9 3 1 15 13 12 8 9 5 11 13 6 9 15 13 13 15 5 2 0 23 13 3 26 11 15 11 14 4 0 1 11 5 20 12 16 1 2 23 27 5 11 12 0 10 21 22 13 21 1 0 0 26 25 10 36 10 7 3 40 47 19 35 21 1 4 12 61 -1 );
      Print(p_D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 );
      PrintStep( S , 60,  295 , 1);
      PrintStep( S_C , 60,  295 , 1);
      PrintStep( E , 60,  295 , 1);
      PrintStep( E_C , 60,  295 , 1);
      PrintStep( I_U , 60,  295 , 1);
      PrintStep( I_C , 60,  295 , 1);
      PrintStep( I_T , 60,  295 , 1);
      PrintStep( R_U , 60,  295 , 1);
      PrintStep( R_T , 60,  295 , 1);
      PrintStep( F_T , 60,  295 , 1);
      PrintStep( CumInfected , 60,  295 , 1);
      PrintStep( CumPosTest , 60,  295 , 1);
      PrintStep( CumDeath , 60,  295 , 1);
      PrintStep( dtCumInfected , 60,  295 , 1);
      PrintStep( dtCumPosTest , 60,  295 , 1);
      PrintStep( dtCumDeath , 60,  295 , 1);
      PrintStep( Tot , 60,  295 , 1);
      PrintStep( ThetaFit , 60,  295 , 1);
      PrintStep( HygieneFit , 60,  295 , 1);
      PrintStep( c , 60,  295 , 1);
      PrintStep( beta , 60,  295 , 1);
      PrintStep( rho , 60,  295 , 1);
      PrintStep( lambda , 60,  295 , 1);
      PrintStep( delta , 60,  295 , 1);
      PrintStep( Rt , 60,  295 , 1);
      PrintStep( Refft , 60,  295 , 1);

    }
  }
}
