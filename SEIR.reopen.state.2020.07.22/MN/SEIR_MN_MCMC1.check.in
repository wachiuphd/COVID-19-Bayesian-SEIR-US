MCMC ("simMCMC.out","SEIR_MN_MCMC1.out",  # name of output and restart file
      "",                     # name of data file
      200000,1,                 # iterations, print predictions flag,
      100,200000,                 # printing frequency, iters to print
      10101010);              # random seed (default)

Integrate (Lsodes, 1e-8, 1e-10, 1);

Level {
  
  Distrib(GM_NInit, TruncLogNormal, 1000, 10, 1, 10000); # Number of index cases
  Distrib(GM_TIsolation, TruncLogNormal, 14, 2, 7, 21); # Isolation time after contact tracing
  Distrib(GM_R0, TruncNormal, 2.9, 0.78, 1.46, 4.5); # Basic reproductive number
  Distrib(GM_c0, TruncNormal, 13, 5, 7, 20); # Average contacts/day
  Distrib(GM_TLatent, TruncNormal, 4, 1, 2, 7); # Latency
  Distrib(GM_TRecover, TruncLogNormal, 10, 1.5, 5, 30); # Time to recovery (no longer infectious)
  Distrib(GM_IFR, TruncLogNormal, 0.01, 2, 0.001, 0.1); # Infected fatality rate
  Distrib(GM_TStartTesting, TruncNormal, 90, 30, 60, 150); # Time of start of testing
  Distrib(GM_TauTesting, TruncNormal, 7, 3, 1, 14); # Time constant for testing
  Distrib(GM_TTestingRate, TruncNormal, 7, 3, 2, 12);
  Distrib(GM_TContactsTestingRate, TruncNormal, 2, 1, 1, 3); 
  Distrib(GM_TestingCoverage, TruncNormal, 0.5, 0.2, 0.2, 0.8);
  Distrib(GM_TestSensitivity, TruncNormal, 0.7, 0.1, 0.6, 0.95);
  Distrib(GM_ThetaMin, TruncNormal, 0.42, 0.247, 0, 0.789); # Minimum value for social distancing
  Distrib(GM_TauTheta, TruncNormal, 17.6, 1.66, 15.3, 20.2); # Characteristic time for social distancing
  Distrib(GM_PwrTheta, TruncNormal, 4.87, 2.17, 2.44, 8.74); # Power in Weibull model for social distancing
  Distrib(GM_HygienePwr, Beta, 2, 2); # Power in Weibull model for social distancing
  Distrib(GM_FracTraced, TruncLogNormal, 0.25, 2, 0.05, 1); # Fraction traced
  
  Distrib(GM_TPosTest, TruncLogNormal, 7, 2, 1, 14); # Reporting delay
  Distrib(GM_TFatalDeath, TruncLogNormal, 7, 2, 1, 14); # Time from fatal illness to death + reporting delay
  
  Distrib(GM_TauS, TruncNormal, 33.7, 16.3, 23.4, 73.3);
  Distrib(GM_rMax, TruncNormal, 0.546, 0.226, 0.213, 0.851);
  Distrib(GM_TauR, TruncNormal, 55.2, 19.7, 20, 76.8);
  
  Distrib(alpha_Pos, LogUniform, 4, 40);
  Distrib(alpha_Death, LogUniform, 8, 40);
  
  Level {
    
    Likelihood(Data(N_pos), NegativeBinomial, alpha_Pos, Prediction(p_N_pos));
    Likelihood(Data(D_pos), NegativeBinomial, alpha_Death, Prediction(p_D_pos));

    Simulation { # MN 

      Npop = 5639632 ;
      StartTime(60);

      Print(N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Data(N_pos, 18 16 24 22 44 51 58 63 75 47 38 98 93 57 83 63 39 59 113 102 102 103 95 74 58 148 153 156 165 182 120 126 276 262 306 512 518 339 385 675 601 680 648 620 335 340 824 641 634 818 712 281 231 827 664 729 793 798 342 311 971 855 767 973 792 391 356 403 784 680 571 454 168 141 575 479 513 401 398 165 135 448 430 333 219 45 2 6 222 189 414 379 356 436 453 307 242 294 360 493 417 516 312 442 413 494 414 0 512 433 564 456 574 604 804 710 491 398 572 605 666 457 734 903 350 504 );
      Print(p_N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Print(D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Data(D_pos, 0 0 1 0 0 0 0 1 2 1 4 1 2 5 1 4 2 5 1 4 5 11 7 7 6 0 9 8 7 17 10 13 9 17 19 21 21 23 28 14 15 18 24 28 24 24 9 27 30 23 26 24 20 13 23 24 25 29 17 22 9 17 29 32 33 10 17 12 18 34 35 29 30 14 10 22 15 29 33 22 16 11 20 39 13 25 9 15 6 9 13 19 17 11 8 4 9 7 9 5 6 8 10 6 6 13 8 0 5 3 3 9 5 5 4 3 2 6 10 8 7 5 3 4 3 4 );
      Print(p_D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      PrintStep( S , 60,  294 , 1);
      PrintStep( S_C , 60,  294 , 1);
      PrintStep( E , 60,  294 , 1);
      PrintStep( E_C , 60,  294 , 1);
      PrintStep( I_U , 60,  294 , 1);
      PrintStep( I_C , 60,  294 , 1);
      PrintStep( I_T , 60,  294 , 1);
      PrintStep( R_U , 60,  294 , 1);
      PrintStep( R_T , 60,  294 , 1);
      PrintStep( F_T , 60,  294 , 1);
      PrintStep( CumInfected , 60,  294 , 1);
      PrintStep( CumPosTest , 60,  294 , 1);
      PrintStep( CumDeath , 60,  294 , 1);
      PrintStep( dtCumInfected , 60,  294 , 1);
      PrintStep( dtCumPosTest , 60,  294 , 1);
      PrintStep( dtCumDeath , 60,  294 , 1);
      PrintStep( Tot , 60,  294 , 1);
      PrintStep( ThetaFit , 60,  294 , 1);
      PrintStep( HygieneFit , 60,  294 , 1);
      PrintStep( c , 60,  294 , 1);
      PrintStep( beta , 60,  294 , 1);
      PrintStep( rho , 60,  294 , 1);
      PrintStep( lambda , 60,  294 , 1);
      PrintStep( delta , 60,  294 , 1);
      PrintStep( Rt , 60,  294 , 1);
      PrintStep( Refft , 60,  294 , 1);

    }
  }
}
