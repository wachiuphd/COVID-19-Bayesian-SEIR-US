MCMC ("simMCMC.out","SEIR_MD_MCMC1.out",  # name of output and restart file
      "",                     # name of data file
      200000,1,                 # iterations, print predictions flag,
      100,200000,                 # printing frequency, iters to print
      10101010);              # random seed (default)

Integrate (Lsodes, 1e-8, 1e-10, 1);

Level {
  
  Distrib(GM_NInit, TruncLogNormal, 1000, 10, 1, 10000); # Number of index cases
  Distrib(GM_TIsolation, TruncLogNormal, 14, 2, 7, 21); # Isolation time after contact tracing
  Distrib(GM_R0, TruncNormal, 2.9, 0.78, 1.46, 4.5); # Basic reproductive number
  Distrib(GM_c0, TruncNormal, 13, 5, 7, 20); # Average contacts/day
  Distrib(GM_TLatent, TruncNormal, 4, 1, 2, 7); # Latency
  Distrib(GM_TRecover, TruncLogNormal, 10, 1.5, 5, 30); # Time to recovery (no longer infectious)
  Distrib(GM_IFR, TruncLogNormal, 0.01, 2, 0.001, 0.1); # Infected fatality rate
  Distrib(GM_TStartTesting, TruncNormal, 90, 30, 60, 150); # Time of start of testing
  Distrib(GM_TauTesting, TruncNormal, 7, 3, 1, 14); # Time constant for testing
  Distrib(GM_TTestingRate, TruncNormal, 7, 3, 2, 12);
  Distrib(GM_TContactsTestingRate, TruncNormal, 2, 1, 1, 3); 
  Distrib(GM_TestingCoverage, TruncNormal, 0.5, 0.2, 0.2, 0.8);
  Distrib(GM_TestSensitivity, TruncNormal, 0.7, 0.1, 0.6, 0.95);
  Distrib(GM_ThetaMin, TruncNormal, 0.408, 0.233, 0, 0.75); # Minimum value for social distancing
  Distrib(GM_TauTheta, TruncNormal, 17.8, 1.77, 14.6, 19.4); # Characteristic time for social distancing
  Distrib(GM_PwrTheta, TruncNormal, 4.04, 0.793, 2.94, 5.41); # Power in Weibull model for social distancing
  Distrib(GM_HygienePwr, Beta, 2, 2); # Power in Weibull model for social distancing
  Distrib(GM_FracTraced, TruncLogNormal, 0.25, 2, 0.05, 1); # Fraction traced
  
  Distrib(GM_TPosTest, TruncLogNormal, 7, 2, 1, 14); # Reporting delay
  Distrib(GM_TFatalDeath, TruncLogNormal, 7, 2, 1, 14); # Time from fatal illness to death + reporting delay
  
  Distrib(GM_TauS, TruncNormal, 38.2, 14.1, 28, 72);
  Distrib(GM_rMax, TruncNormal, 0.456, 0.182, 0.195, 0.704);
  Distrib(GM_TauR, TruncNormal, 58.5, 14, 30.1, 76.6);
  
  Distrib(alpha_Pos, LogUniform, 4, 40);
  Distrib(alpha_Death, LogUniform, 8, 40);
  
  Level {
    
    Likelihood(Data(N_pos), NegativeBinomial, alpha_Pos, Prediction(p_N_pos));
    Likelihood(Data(D_pos), NegativeBinomial, alpha_Death, Prediction(p_D_pos));

    Simulation { # MD 

      Npop = 6045680 ;
      StartTime(60);

      Print(N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Data(N_pos, 22 42 41 54 44 61 74 157 194 218 247 174 247 325 346 427 367 484 436 326 1158 656 783 726 531 711 536 560 752 788 736 522 854 509 582 962 879 1150 815 906 626 736 893 1730 1001 989 946 709 1046 1211 1111 1049 1053 786 688 751 1091 1083 982 836 958 1784 777 1208 893 1071 818 839 535 736 1286 1279 1027 763 549 848 807 876 912 712 491 431 500 561 732 416 692 396 331 377 560 260 319 408 350 297 404 330 440 338 335 327 477 305 359 505 538 380 291 272 492 465 586 463 557 642 418 733 756 648 707 835 925 554 860 627 );
      Print(p_N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Print(D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Data(D_pos, 0 1 0 1 0 1 0 2 3 7 7 11 8 9 12 20 17 21 16 22 31 30 34 43 37 49 37 48 30 42 41 44 57 49 47 52 68 49 53 44 54 69 58 50 47 49 52 52 44 60 63 49 47 49 46 47 54 56 49 50 32 42 34 23 53 32 35 38 38 41 43 37 24 34 29 21 20 2 34 38 9 27 35 33 31 25 26 13 8 35 14 20 14 22 14 8 18 16 21 13 15 11 7 15 15 7 11 13 7 3 20 9 13 15 7 9 6 9 7 6 12 9 9 5 20 3 );
      Print(p_D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      PrintStep( S , 60,  294 , 1);
      PrintStep( S_C , 60,  294 , 1);
      PrintStep( E , 60,  294 , 1);
      PrintStep( E_C , 60,  294 , 1);
      PrintStep( I_U , 60,  294 , 1);
      PrintStep( I_C , 60,  294 , 1);
      PrintStep( I_T , 60,  294 , 1);
      PrintStep( R_U , 60,  294 , 1);
      PrintStep( R_T , 60,  294 , 1);
      PrintStep( F_T , 60,  294 , 1);
      PrintStep( CumInfected , 60,  294 , 1);
      PrintStep( CumPosTest , 60,  294 , 1);
      PrintStep( CumDeath , 60,  294 , 1);
      PrintStep( dtCumInfected , 60,  294 , 1);
      PrintStep( dtCumPosTest , 60,  294 , 1);
      PrintStep( dtCumDeath , 60,  294 , 1);
      PrintStep( Tot , 60,  294 , 1);
      PrintStep( ThetaFit , 60,  294 , 1);
      PrintStep( HygieneFit , 60,  294 , 1);
      PrintStep( c , 60,  294 , 1);
      PrintStep( beta , 60,  294 , 1);
      PrintStep( rho , 60,  294 , 1);
      PrintStep( lambda , 60,  294 , 1);
      PrintStep( delta , 60,  294 , 1);
      PrintStep( Rt , 60,  294 , 1);
      PrintStep( Refft , 60,  294 , 1);

    }
  }
}
