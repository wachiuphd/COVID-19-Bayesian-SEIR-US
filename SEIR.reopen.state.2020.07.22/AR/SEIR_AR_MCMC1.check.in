MCMC ("simMCMC.out","SEIR_AR_MCMC1.out",  # name of output and restart file
      "",                     # name of data file
      200000,1,                 # iterations, print predictions flag,
      100,200000,                 # printing frequency, iters to print
      10101010);              # random seed (default)

Integrate (Lsodes, 1e-8, 1e-10, 1);

Level {
  
  Distrib(GM_NInit, TruncLogNormal, 1000, 10, 1, 10000); # Number of index cases
  Distrib(GM_TIsolation, TruncLogNormal, 14, 2, 7, 21); # Isolation time after contact tracing
  Distrib(GM_R0, TruncNormal, 2.9, 0.78, 1.46, 4.5); # Basic reproductive number
  Distrib(GM_c0, TruncNormal, 13, 5, 7, 20); # Average contacts/day
  Distrib(GM_TLatent, TruncNormal, 4, 1, 2, 7); # Latency
  Distrib(GM_TRecover, TruncLogNormal, 10, 1.5, 5, 30); # Time to recovery (no longer infectious)
  Distrib(GM_IFR, TruncLogNormal, 0.01, 2, 0.001, 0.1); # Infected fatality rate
  Distrib(GM_TStartTesting, TruncNormal, 90, 30, 60, 150); # Time of start of testing
  Distrib(GM_TauTesting, TruncNormal, 7, 3, 1, 14); # Time constant for testing
  Distrib(GM_TTestingRate, TruncNormal, 7, 3, 2, 12);
  Distrib(GM_TContactsTestingRate, TruncNormal, 2, 1, 1, 3); 
  Distrib(GM_TestingCoverage, TruncNormal, 0.5, 0.2, 0.2, 0.8);
  Distrib(GM_TestSensitivity, TruncNormal, 0.7, 0.1, 0.6, 0.95);
  Distrib(GM_ThetaMin, TruncNormal, 0.545, 0.272, 0.00189, 0.854); # Minimum value for social distancing
  Distrib(GM_TauTheta, TruncNormal, 17.4, 1.86, 14.8, 20.9); # Characteristic time for social distancing
  Distrib(GM_PwrTheta, TruncNormal, 4.32, 1.18, 2.45, 5.76); # Power in Weibull model for social distancing
  Distrib(GM_HygienePwr, Beta, 2, 2); # Power in Weibull model for social distancing
  Distrib(GM_FracTraced, TruncLogNormal, 0.25, 2, 0.05, 1); # Fraction traced
  
  Distrib(GM_TPosTest, TruncLogNormal, 7, 2, 1, 14); # Reporting delay
  Distrib(GM_TFatalDeath, TruncLogNormal, 7, 2, 1, 14); # Time from fatal illness to death + reporting delay
  
  Distrib(GM_TauS, TruncNormal, 32.9, 13.5, 19.4, 54);
  Distrib(GM_rMax, TruncNormal, 0.572, 0.247, 0.174, 0.884);
  Distrib(GM_TauR, TruncNormal, 39.9, 20.8, 1.85, 64.1);
  
  Distrib(alpha_Pos, LogUniform, 4, 40);
  Distrib(alpha_Death, LogUniform, 8, 40);
  
  Level {
    
    Likelihood(Data(N_pos), NegativeBinomial, alpha_Pos, Prediction(p_N_pos));
    Likelihood(Data(D_pos), NegativeBinomial, alpha_Death, Prediction(p_D_pos));

    Simulation { # AR 

      Npop = 3017804 ;
      StartTime(60);

      Print(N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Data(N_pos, 13 50 22 47 9 44 62 55 46 23 22 47 50 61 59 61 39 87 45 71 54 119 52 55 54 130 70 89 51 75 44 42 142 304 49 189 276 88 112 76 94 81 63 66 51 59 27 38 72 43 83 53 0 287 130 0 72 227 115 181 54 110 80 455 154 0 310 107 151 97 261 0 475 240 190 0 624 0 584 450 325 314 340 288 448 731 0 954 416 274 415 322 703 511 0 941 595 697 687 0 678 570 947 520 420 878 547 587 0 1044 259 0 1540 751 0 1564 572 794 564 817 648 0 771 1394 728 591 );
      Print(p_N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Print(D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      Data(D_pos, 0 0 0 0 0 0 2 1 0 2 1 1 1 2 2 0 2 2 0 0 2 3 2 1 3 3 0 3 4 0 1 2 2 1 3 0 2 2 1 2 7 2 3 9 3 5 2 2 2 1 0 0 6 1 0 2 1 0 0 2 2 5 3 3 0 3 1 2 1 0 5 8 0 0 0 9 0 10 2 0 1 6 4 6 5 0 3 3 0 15 11 6 10 0 3 10 3 0 0 9 10 6 5 7 2 2 5 0 6 0 9 8 4 0 8 2 8 4 6 12 0 4 0 17 6 );
      Print(p_D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 );
      PrintStep( S , 60,  294 , 1);
      PrintStep( S_C , 60,  294 , 1);
      PrintStep( E , 60,  294 , 1);
      PrintStep( E_C , 60,  294 , 1);
      PrintStep( I_U , 60,  294 , 1);
      PrintStep( I_C , 60,  294 , 1);
      PrintStep( I_T , 60,  294 , 1);
      PrintStep( R_U , 60,  294 , 1);
      PrintStep( R_T , 60,  294 , 1);
      PrintStep( F_T , 60,  294 , 1);
      PrintStep( CumInfected , 60,  294 , 1);
      PrintStep( CumPosTest , 60,  294 , 1);
      PrintStep( CumDeath , 60,  294 , 1);
      PrintStep( dtCumInfected , 60,  294 , 1);
      PrintStep( dtCumPosTest , 60,  294 , 1);
      PrintStep( dtCumDeath , 60,  294 , 1);
      PrintStep( Tot , 60,  294 , 1);
      PrintStep( ThetaFit , 60,  294 , 1);
      PrintStep( HygieneFit , 60,  294 , 1);
      PrintStep( c , 60,  294 , 1);
      PrintStep( beta , 60,  294 , 1);
      PrintStep( rho , 60,  294 , 1);
      PrintStep( lambda , 60,  294 , 1);
      PrintStep( delta , 60,  294 , 1);
      PrintStep( Rt , 60,  294 , 1);
      PrintStep( Refft , 60,  294 , 1);

    }
  }
}
