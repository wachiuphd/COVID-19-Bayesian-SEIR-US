MCMC ("simMCMC.out","SEIR_OR_MCMC4.out",  # name of output and restart file
      "",                     # name of data file
      200000,1,                 # iterations, print predictions flag,
      100,200000,                 # printing frequency, iters to print
      10101010);              # random seed (default)

Integrate (Lsodes, 1e-8, 1e-10, 1);

Level {
  
  Distrib(GM_NInit, TruncLogNormal, 1000, 10, 1, 10000); # Number of index cases
  Distrib(GM_TIsolation, TruncLogNormal, 14, 2, 7, 21); # Isolation time after contact tracing
  Distrib(GM_R0, TruncNormal, 2.9, 0.78, 1.46, 4.5); # Basic reproductive number
  Distrib(GM_c0, TruncNormal, 13, 5, 7, 20); # Average contacts/day
  Distrib(GM_TLatent, TruncNormal, 4, 1, 2, 7); # Latency
  Distrib(GM_TRecover, TruncLogNormal, 10, 1.5, 5, 30); # Time to recovery (no longer infectious)
  Distrib(GM_IFR, TruncLogNormal, 0.01, 2, 0.001, 0.1); # Infected fatality rate
  Distrib(GM_T50Testing, TruncNormal, 120, 60, 60, 180); # Time of 50% of final testing rate
  Distrib(GM_TauTesting, TruncNormal, 21, 14, 1, 42); # Time constant for testing
  Distrib(GM_TTestingRate, TruncNormal, 7, 3, 2, 12);
  Distrib(GM_TContactsTestingRate, TruncNormal, 2, 1, 1, 3); 
  Distrib(GM_FAsymp, TruncNormal, 0.295, 0.275, 0.02, 0.57); # Fraction asymptomatic
  Distrib(GM_TestingCoverage, Beta, 2, 2); # Testing coverage
  Distrib(GM_TestSensitivity, TruncNormal, 0.7, 0.1, 0.6, 0.95);
  Distrib(GM_ThetaMin, TruncNormal, 0.44, 0.259, 0, 1); # Minimum value for social distancing
  Distrib(GM_TauTheta, TruncNormal, 18.1, 1.59, 7, 35); # Characteristic time for social distancing
  Distrib(GM_PwrTheta, TruncNormal, 3.99, 0.934, 1, 11); # Power in Weibull model for social distancing
  Distrib(GM_HygienePwr, Beta, 2, 4); # Power in Weibull model for social distancing
  Distrib(GM_FracTraced, TruncLogNormal, 0.25, 2, 0.05, 1); # Fraction traced
  
  Distrib(GM_TPosTest, TruncLogNormal, 7, 2, 1, 14); # Reporting delay
  Distrib(GM_TFatalDeath, TruncLogNormal, 7, 2, 1, 14); # Time from fatal illness to death + reporting delay
  
  Distrib(GM_TauS, TruncNormal, 25.1, 21.6, 21, 90);
  Distrib(GM_rMax, TruncNormal, 0.567, 0.243, 0, 2);
  Distrib(GM_TauR, TruncNormal, 61.9, 30.1, 14, 105);
  
  Distrib(alpha_Pos, LogUniform, 0.1, 40);
  Distrib(alpha_Death, LogUniform, 0.1, 40);
  
  Level {
    
    Likelihood(Data(N_pos), NegativeBinomial, alpha_Pos, Prediction(p_N_pos));
    Likelihood(Data(D_pos), NegativeBinomial, alpha_Death, Prediction(p_D_pos));

    Simulation { # OR 

      Npop = 4217737 ;
      StartTime(60);

      Print(N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 );
      Data(N_pos, 13 26 0 47 30 18 0 118 87 65 69 58 84 46 90 73 100 69 64 49 58 82 0 50 156 57 49 30 73 49 59 66 46 46 57 68 50 76 58 43 0 92 64 69 56 45 79 80 77 73 79 92 68 58 0 130 63 62 71 11 64 39 75 16 47 24 39 22 18 71 48 45 54 58 59 33 64 75 96 92 146 114 66 72 177 140 158 101 184 278 120 148 206 178 187 146 191 170 124 250 276 247 144 171 275 363 342 294 300 165 210 212 371 266 397 319 268 367 276 428 293 347 430 268 292 254 -1 -1 -1 );
      Print(p_N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 );
      Print(D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 );
      Data(D_pos, 0 0 0 1 1 3 0 3 1 1 0 3 2 0 3 1 4 1 0 6 0 11 0 4 4 1 2 3 6 6 2 2 1 3 0 5 3 1 4 1 0 9 2 1 5 0 0 4 2 6 3 3 0 3 0 4 3 0 0 0 1 2 4 1 2 0 1 0 0 0 3 0 2 0 1 3 2 0 2 2 1 0 5 0 2 2 1 2 4 2 1 4 1 1 1 2 0 3 2 5 0 0 2 3 1 1 0 4 2 0 5 4 6 2 0 2 3 7 3 2 5 3 3 2 7 0 -1 -1 -1 );
      Print(p_D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 );
      PrintStep( S , 60,  297 , 1);
      PrintStep( S_C , 60,  297 , 1);
      PrintStep( E , 60,  297 , 1);
      PrintStep( E_C , 60,  297 , 1);
      PrintStep( I_U , 60,  297 , 1);
      PrintStep( I_C , 60,  297 , 1);
      PrintStep( I_T , 60,  297 , 1);
      PrintStep( A_U , 60,  297 , 1);
      PrintStep( A_C , 60,  297 , 1);
      PrintStep( R_U , 60,  297 , 1);
      PrintStep( R_T , 60,  297 , 1);
      PrintStep( F_T , 60,  297 , 1);
      PrintStep( CumInfected , 60,  297 , 1);
      PrintStep( CumPosTest , 60,  297 , 1);
      PrintStep( CumDeath , 60,  297 , 1);
      PrintStep( dtCumInfected , 60,  297 , 1);
      PrintStep( dtCumPosTest , 60,  297 , 1);
      PrintStep( dtCumDeath , 60,  297 , 1);
      PrintStep( Tot , 60,  297 , 1);
      PrintStep( ThetaFit , 60,  297 , 1);
      PrintStep( HygieneFit , 60,  297 , 1);
      PrintStep( c , 60,  297 , 1);
      PrintStep( beta , 60,  297 , 1);
      PrintStep( rho , 60,  297 , 1);
      PrintStep( lambda , 60,  297 , 1);
      PrintStep( delta , 60,  297 , 1);
      PrintStep( Rt , 60,  297 , 1);
      PrintStep( Refft , 60,  297 , 1);

    }
  }
}
