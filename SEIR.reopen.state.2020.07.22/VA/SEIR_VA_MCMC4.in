MCMC ("simMCMC.out","",  # name of output and restart file
      "",                     # name of data file
      200000,0,                 # iterations, print predictions flag,
      100,200000,                 # printing frequency, iters to print
      1143.91475588553);              # random seed (default)

Integrate (Lsodes, 1e-8, 1e-10, 1);

Level {
  
  Distrib(GM_NInit, TruncLogNormal, 1000, 10, 1, 10000); # Number of index cases
  Distrib(GM_TIsolation, TruncLogNormal, 14, 2, 7, 21); # Isolation time after contact tracing
  Distrib(GM_R0, TruncNormal, 2.9, 0.78, 1.46, 4.5); # Basic reproductive number
  Distrib(GM_c0, TruncNormal, 13, 5, 7, 20); # Average contacts/day
  Distrib(GM_TLatent, TruncNormal, 4, 1, 2, 7); # Latency
  Distrib(GM_TRecover, TruncLogNormal, 10, 1.5, 5, 30); # Time to recovery (no longer infectious)
  Distrib(GM_IFR, TruncLogNormal, 0.01, 2, 0.001, 0.1); # Infected fatality rate
  Distrib(GM_T50Testing, TruncNormal, 120, 60, 60, 180); # Time of 50% of final testing rate
  Distrib(GM_TauTesting, TruncNormal, 21, 14, 1, 42); # Time constant for testing
  Distrib(GM_TTestingRate, TruncNormal, 7, 3, 2, 12);
  Distrib(GM_TContactsTestingRate, TruncNormal, 2, 1, 1, 3); 
  Distrib(GM_FAsymp, TruncNormal, 0.295, 0.275, 0.02, 0.57); # Fraction asymptomatic
  Distrib(GM_TestingCoverage, Beta, 2, 2); # Testing coverage
  Distrib(GM_TestSensitivity, TruncNormal, 0.7, 0.1, 0.6, 0.95);
  Distrib(GM_ThetaMin, TruncNormal, 0.447, 0.241, 0, 1); # Minimum value for social distancing
  Distrib(GM_TauTheta, TruncNormal, 18, 1.66, 7, 35); # Characteristic time for social distancing
  Distrib(GM_PwrTheta, TruncNormal, 3.98, 0.99, 1, 11); # Power in Weibull model for social distancing
  Distrib(GM_HygienePwr, Beta, 2, 4); # Power in Weibull model for social distancing
  Distrib(GM_FracTraced, TruncLogNormal, 0.25, 2, 0.05, 1); # Fraction traced
  
  Distrib(GM_TPosTest, TruncLogNormal, 7, 2, 1, 14); # Reporting delay
  Distrib(GM_TFatalDeath, TruncLogNormal, 7, 2, 1, 14); # Time from fatal illness to death + reporting delay
  
  Distrib(GM_TauS, TruncNormal, 36.7, 13.5, 21, 90);
  Distrib(GM_rMax, TruncNormal, 0.48, 0.208, 0, 2);
  Distrib(GM_TauR, TruncNormal, 56.7, 13.9, 14, 105);
  
  Distrib(alpha_Pos, LogUniform, 0.1, 40);
  Distrib(alpha_Death, LogUniform, 0.1, 40);
  
  Level {
    
    Likelihood(Data(N_pos), NegativeBinomial, alpha_Pos, Prediction(p_N_pos));
    Likelihood(Data(D_pos), NegativeBinomial, alpha_Death, Prediction(p_D_pos));

    Simulation { # VA 

      Npop = 8535519 ;
      StartTime(60);

      Print(N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      Data(N_pos, 17 20 38 67 35 36 101 69 144 135 151 130 230 234 222 306 395 230 241 455 312 397 467 568 197 473 424 329 389 602 562 484 453 640 636 732 596 772 604 565 804 622 885 1055 830 940 821 764 0 1314 772 854 885 989 730 946 1067 859 1011 705 752 1005 763 1229 813 799 495 1483 1615 907 1152 1132 1078 996 791 841 666 951 676 865 1284 570 487 439 470 564 658 637 380 445 444 463 555 650 551 471 529 520 432 624 677 489 453 598 416 532 658 716 639 354 638 635 613 943 851 888 972 801 1084 904 1002 940 1057 945 996 1022 -1 -1 );
      Print(p_N_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      Print(D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      Data(D_pos, 1 0 0 1 3 1 2 4 1 3 5 3 2 7 7 5 6 3 9 12 34 12 9 11 8 5 41 13 23 27 19 23 24 25 23 38 26 12 10 34 30 30 29 35 44 24 29 0 56 43 15 12 11 41 36 28 22 25 7 5 27 33 25 37 23 12 37 28 45 57 20 12 5 17 15 21 17 8 7 12 5 19 18 6 14 7 5 6 18 13 3 16 5 4 9 25 16 14 25 24 8 8 23 23 30 29 4 4 0 28 24 32 21 4 4 2 9 15 15 6 12 2 4 17 3 -1 -1 );
      Print(p_D_pos, 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 );
      PrintStep( S , 60,  296 , 1);
      PrintStep( S_C , 60,  296 , 1);
      PrintStep( E , 60,  296 , 1);
      PrintStep( E_C , 60,  296 , 1);
      PrintStep( I_U , 60,  296 , 1);
      PrintStep( I_C , 60,  296 , 1);
      PrintStep( I_T , 60,  296 , 1);
      PrintStep( R_U , 60,  296 , 1);
      PrintStep( R_T , 60,  296 , 1);
      PrintStep( F_T , 60,  296 , 1);
      PrintStep( CumInfected , 60,  296 , 1);
      PrintStep( CumPosTest , 60,  296 , 1);
      PrintStep( CumDeath , 60,  296 , 1);
      PrintStep( dtCumInfected , 60,  296 , 1);
      PrintStep( dtCumPosTest , 60,  296 , 1);
      PrintStep( dtCumDeath , 60,  296 , 1);
      PrintStep( Tot , 60,  296 , 1);
      PrintStep( ThetaFit , 60,  296 , 1);
      PrintStep( HygieneFit , 60,  296 , 1);
      PrintStep( c , 60,  296 , 1);
      PrintStep( beta , 60,  296 , 1);
      PrintStep( rho , 60,  296 , 1);
      PrintStep( lambda , 60,  296 , 1);
      PrintStep( delta , 60,  296 , 1);
      PrintStep( Rt , 60,  296 , 1);
      PrintStep( Refft , 60,  296 , 1);

    }
  }
}
